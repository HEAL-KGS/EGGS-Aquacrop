!pip install sklearnfrom os import chdir, getcwdimport pandas as pdimport matplotlib.pyplot as pltfrom sklearn.metrics import mean_squared_error import seaborn as snswd=getcwd() # set working directorychdir(wd)# read in dfyield_df = pd.read_csv(wd + '/data/analysis_results/yield_df_1381151.csv', index_col=0)irrig_df = pd.read_csv(wd + '/data/analysis_results/irrig_df_1381151.csv', index_col =0)#boxplot showing wimas irrigation and irrigation when irrig is trigered different soil moisture threshlos#yield 2006-2015boxplot = irrig_df.boxplot(column=['irrig_wimas', '0', '20', '40', '60', '80', '100'], showmeans=True)boxplot.set_ylabel('Irrigation (mm)')boxplot.set_xlabel('Soil-moisture threshold (%TAW)')#boxplot with USDS NASS yield and Aquacrop yield 2000-2014boxplot = yield_df.boxplot(column=['YieldUSDA', '0', '20', '40', '60', '80', '100'], showmeans=True)boxplot.set_ylabel('Yield (t/ha)')boxplot.set_xlabel('Soil-moisture threshold (%TAW)')# yield model comparison plotyield_val = yield_df.drop(columns = ['Year', 'Value'])yield_val = pd.melt(yield_val, id_vars=['YieldUSDA'],                  var_name='model_name', value_name='values')# drop time variable# plot looks funky, so removed 0 values from Etg = sns.scatterplot(data = yield_val,                    x ='YieldUSDA',             y = 'values',            hue = 'model_name')#plt.plot(et_means['time'], et_means['Et'], color='black')plt.ylabel('AquaCrop Yield (t/ha)')plt.xlabel('YieldUSDA (t/ha)')plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0)# irrigation model comparison plotirrig_val = irrig_df.drop(columns = ['Year', 'UID', 'Irrigation_m3']) # drop time variableirrig_val = pd.melt(irrig_val, id_vars=['irrig_wimas'],                  var_name='model_name', value_name='values')# plot looks funky, so removed 0 values from Etg = sns.scatterplot(data = irrig_val,                    x ='irrig_wimas',             y = 'values',            hue = 'model_name')plt.xlabel('WIMAS Irrigation (mm)')plt.ylabel('AquaCrop Irrigation (mm)')plt.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0)# statistical analysis for yield # RMSE assuming USDA data is observed and AquaCrop is Predicted#rmse_80 = mean_squared_error(realVals_yeild, predictedVals_80_yield, squared = False)realVals_yield = yield_df[['YieldUSDA']]yield_list = (yield_df[['0']],           yield_df[['20']],           yield_df[['40']],           yield_df[['60']],           yield_df[['80']],          yield_df[['100']])rmse_list = []for i in yield_list:    #rmse =     rmse_list.append(mean_squared_error(realVals_yield, i, squared = False))# statistical analysis for irrigrealVals_irrig = irrig_df[['irrig_wimas']]irrig_list = (irrig_df[['0']],           irrig_df[['20']],           irrig_df[['40']],           irrig_df[['60']],           irrig_df[['80']],          irrig_df[['100']])rmse_list_irrig = []for i in irrig_list:    #rmse =     rmse_list_irrig.append(mean_squared_error(realVals_irrig, i, squared = False))# index of agreementdef indexAgreement(sim, obs):    d_val = 1 - ((sum(obs - sim)^2)/sum((abs(sim - mean(obs)) + abs(obs - mean(obs)))^2)    print(d_val)x = yield_df[['20']]1 - ((sum(obs - sim)^2)/sum((abs(sim - mean(obs)) + abs(obs - mean(obs)))^2)]                   d(yield_df[, realVals_yeild)rmse_list = []for i in yield_list:    rmse = mean_squared_error(realVals_yeild, i, squared = False)    d_val = d(i, realVals_yeild)    #stats_df = pd.merge(rmse, d_vale, left_index=True, right_index=True)    #print(rmse)    #rmse_list.append(mean_squared_error(realVals_yeild, i, squared = False))